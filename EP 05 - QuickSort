#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MIN_VALOR -10000
#define MAX_VALOR 10000

void preencher_vetor(int *vetor, int tamanho) {
    srand(time(NULL)); // semente para gerar números aleatórios
    for (int i = 0; i < tamanho; i++) {
        vetor[i] = rand() % (MAX_VALOR - MIN_VALOR + 1) + MIN_VALOR; // número aleatório no intervalo [-10000, 10000]
    }
}

int Particao(int *v, int esq, int dir) {
    int pivo = v[dir];
    int i = esq - 1;
    for (int j = esq; j < dir; j++) {
        if (v[j] < pivo) {
            i++;
            int tmp = v[i];
            v[i] = v[j];
            v[j] = tmp;
        }
    }
    int tmp = v[i+1];
    v[i+1] = v[dir];
    v[dir] = tmp;
    return i+1;
}

void quick_sort(int v[], int esq, int dir) {
    if (esq < dir) {
        int p = Particao(v, esq, dir);
        quick_sort(v, esq, p - 1);
        quick_sort(v, p + 1, dir);
    }
}

void medir_tempo_execucao(int v[], int n, int esq, int dir) {
    clock_t inicio, fim;
    double tempo_gasto;
    inicio = clock();
    quick_sort(v, esq, dir);
    fim = clock();
    tempo_gasto = ((double)(fim - inicio)) / CLOCKS_PER_SEC;
    printf("Tempo de execucao do Quick Sort: %lf segundos.\n", tempo_gasto);
}

int main() {
    int n;
    printf("Informe o tamanho do vetor: ");
    scanf("%d", &n);
    int v[n];
    preencher_vetor(v, n);
    printf("Vetor preenchido com sucesso!\n");
    medir_tempo_execucao(v, n, 0, n-1);
    return 0;
}
